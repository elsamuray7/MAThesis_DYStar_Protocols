module OYRS.SecurityProps


open LabeledCryptoAPI
open LabeledRuntimeAPI
open LabeledPKI

open SecrecyLabels
open CryptoEffect
open CryptoLib
open GlobalRuntimeLib

open AttackerAPI

open OYRS.Messages
open OYRS.Sessions

open SecurityLemmas


/// Ensures that the supposedly honest principals involved in the protocol run and the
/// conversation key generated by the auth server for these principals are stored in
/// the auth server state
val principals_and_conv_key_stored_in_auth_server_state:
  (server:principal) ->
  (set_state_idx:nat) ->
  (vv:version_vec) ->
  (server_state:state_vec) ->
  (state_session_idx:nat) ->
  (initiator:principal) ->
  (responder:principal) ->
  (conv_key:bytes) ->
  Type0

/// Ensures secrecy of the conversation key for honest principals
val conv_key_is_secret:
  (server:principal) ->
  (set_state_idx:nat) ->
  (vv:version_vec) ->
  (server_state:state_vec) ->
  (state_session_idx:nat) ->
  (initiator:principal) ->
  (responder:principal) ->
  (conv_key:bytes) ->
  LCrypto unit (pki oyrs_preds)
  (requires (fun in_tr ->
    // Stuff stored in state
    principals_and_conv_key_stored_in_auth_server_state server set_state_idx vv server_state state_session_idx initiator responder conv_key /\
    // State was set before
    set_state_idx < trace_len in_tr
  ))
  (ensures (fun in_tr _ out_tr ->
    in_tr == out_tr /\
    (
      is_unknown_to_attacker_at (trace_len in_tr) conv_key \/
      (
        corrupt_id (trace_len in_tr) (P server) \/
        corrupt_id (trace_len in_tr) (P initiator) \/
        corrupt_id (trace_len in_tr) (P responder)
      )
    )
  ))
